<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jjppp</title>
  <icon>http://example.com/icon.png</icon>
  <subtitle>Blog of jjppp</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-24T17:06:16.584Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>jpwang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Concurrency03 Axiomatic</title>
    <link href="http://example.com/2022/09/25/Concurrency03-Axiomatic/"/>
    <id>http://example.com/2022/09/25/Concurrency03-Axiomatic/</id>
    <published>2022-09-24T17:06:16.000Z</published>
    <updated>2022-09-24T17:06:16.584Z</updated>
    
    
      
      
        
        
    <summary type="html">
</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Concurrency02 Operational</title>
    <link href="http://example.com/2022/09/25/Concurrency02-Operational/"/>
    <id>http://example.com/2022/09/25/Concurrency02-Operational/</id>
    <published>2022-09-24T17:06:04.000Z</published>
    <updated>2022-10-02T16:05:52.562Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Memory Model 可以通过一种 Operational
的方式来定义，在这种定义下，我们可以看到一个结果是如何一步一步产生的。&lt;/p&gt;
&lt;p&gt;简单地说，一个并发的系统可以看成是 CPU +</summary>
        
      
    
    
    
    
    <category term="Concurrency" scheme="http://example.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Concurrency01 HMM</title>
    <link href="http://example.com/2022/09/25/Concurrency01-HMM/"/>
    <id>http://example.com/2022/09/25/Concurrency01-HMM/</id>
    <published>2022-09-24T17:05:33.000Z</published>
    <updated>2022-10-01T06:16:36.958Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;弱内存模型的出现，本质上是因为单线程的程序优化(编译优化/执行优化)中应用了许多的技术，这些技术在进入多线程编程时代之后使得一些符合直觉的假设不再成立，即内存模型变&quot;弱&quot;了。&lt;/p&gt;
&lt;p&gt;为了</summary>
        
      
    
    
    
    
    <category term="Concurrency" scheme="http://example.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Network02 Application</title>
    <link href="http://example.com/2022/09/12/Network02-Application/"/>
    <id>http://example.com/2022/09/12/Network02-Application/</id>
    <published>2022-09-12T12:44:14.000Z</published>
    <updated>2022-10-01T05:31:51.073Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;应用一般跑在端系统上，此时网络对应用而言是透明的，所有的网络 API
起到进程间通信的作用。&lt;/p&gt;
&lt;h1 id=&quot;application-architecture&quot;&gt;Application</summary>
        
      
    
    
    
    
    <category term="Network" scheme="http://example.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Memory Models</title>
    <link href="http://example.com/2022/09/07/Memory-Model/"/>
    <id>http://example.com/2022/09/07/Memory-Model/</id>
    <published>2022-09-07T07:23:04.000Z</published>
    <updated>2022-09-24T17:06:50.977Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;看了很多资料发现基本都是同一批人在写，&lt;a
href=&quot;https://research.swtch.com/mm&quot;&gt;这篇&lt;/a&gt;
是我感觉讲得比较清楚同时也好懂的。&lt;/p&gt;
&lt;p&gt;同时我发现很少有人用形式化的方法描述</summary>
        
      
    
    
    
    
    <category term="Concurrency" scheme="http://example.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>TAOMP02 Mutex</title>
    <link href="http://example.com/2022/09/02/TAOMP02-Mutex/"/>
    <id>http://example.com/2022/09/02/TAOMP02-Mutex/</id>
    <published>2022-09-02T09:03:21.000Z</published>
    <updated>2022-09-05T00:04:35.487Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;形式化&quot;&gt;形式化&lt;/h1&gt;
&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事件&lt;/strong&gt;是瞬间的、原子的，通常用 &lt;span
class=&quot;math inline&quot;&gt;\(read,</summary>
        
      
    
    
    
    
    <category term="TAOMP" scheme="http://example.com/tags/TAOMP/"/>
    
  </entry>
  
  <entry>
    <title>TAOMP01 Intro</title>
    <link href="http://example.com/2022/09/01/TAOMP01-Intro/"/>
    <id>http://example.com/2022/09/01/TAOMP01-Intro/</id>
    <published>2022-09-01T08:33:49.000Z</published>
    <updated>2022-09-01T16:55:25.618Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;八月份已经过去了，放假前立下的 flag 还有好多没有实现...&lt;/p&gt;
&lt;p&gt;但是这本是上学期上 OS
就想看的书，更早是在吃土耳其烤肉的时候就被安利过&lt;/p&gt;
&lt;p&gt;开干吧...&lt;/p&gt;
&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;h2</summary>
        
      
    
    
    
    
    <category term="TAOMP" scheme="http://example.com/tags/TAOMP/"/>
    
  </entry>
  
  <entry>
    <title>TAPL09 Recursive Types</title>
    <link href="http://example.com/2022/08/29/TAPL09-Recursive-Types/"/>
    <id>http://example.com/2022/08/29/TAPL09-Recursive-Types/</id>
    <published>2022-08-29T15:16:41.000Z</published>
    <updated>2022-08-31T06:54:12.692Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;有种前菜只是刚刚上完的感觉。&lt;/p&gt;
&lt;p&gt;递归数据结构是非常常见的结构，给递归数据结构赋予的类型通常会是一个递归的类型。&lt;/p&gt;
&lt;p&gt;经典的例如&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL08 Subtyping</title>
    <link href="http://example.com/2022/08/28/TAPL08-Subtyping/"/>
    <id>http://example.com/2022/08/28/TAPL08-Subtyping/</id>
    <published>2022-08-28T09:44:48.000Z</published>
    <updated>2022-08-28T14:58:02.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Subtyping（或者说 Subtype
Polymorphism）给出了一种类型间的转换关系（一种
preorder），使得程序猿可以写出很通用的代码。典型的子类型出现在各种 OO
语言里，例如 Java</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL07 Exceptions</title>
    <link href="http://example.com/2022/08/28/TAPL07-Exceptions/"/>
    <id>http://example.com/2022/08/28/TAPL07-Exceptions/</id>
    <published>2022-08-28T06:50:10.000Z</published>
    <updated>2022-08-28T07:51:26.975Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;异常处理一直是老大难问题，大概有这么几个流派&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;用返回值区分，Rust 的 &lt;code&gt;Result&lt;/code&gt;、Haskell 的
&lt;code&gt;Either a</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL06 References</title>
    <link href="http://example.com/2022/08/27/TAPL06-References/"/>
    <id>http://example.com/2022/08/27/TAPL06-References/</id>
    <published>2022-08-27T04:04:59.000Z</published>
    <updated>2022-08-27T06:00:27.754Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;之前提到的 &lt;code&gt;x=term&lt;/code&gt; 都是 name
binding。因为所有的项都可以求值，并且都是纯的计算模型（只和 substitution
有关），所以本质上是 meta level</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>Network01 Intro</title>
    <link href="http://example.com/2022/08/14/Network01-Intro/"/>
    <id>http://example.com/2022/08/14/Network01-Intro/</id>
    <published>2022-08-14T07:41:57.000Z</published>
    <updated>2022-09-06T14:53:21.932Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;网络&quot;&gt;网络&lt;/h1&gt;
&lt;p&gt;形式化的定义网络为图&lt;/p&gt;
&lt;h1 id=&quot;计算机网络&quot;&gt;计算机网络&lt;/h1&gt;
&lt;h2</summary>
        
      
    
    
    
    
    <category term="Network" scheme="http://example.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>TAPL05 Extensions</title>
    <link href="http://example.com/2022/08/09/TAPL05-Extensions/"/>
    <id>http://example.com/2022/08/09/TAPL05-Extensions/</id>
    <published>2022-08-09T03:56:13.000Z</published>
    <updated>2022-08-11T09:53:56.323Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;这一章主要是给 STLC 加上各种常用的
construct，也就是在做语法糖化的过程。比较轻松&lt;/p&gt;
&lt;h1 id=&quot;derived-form&quot;&gt;Derived Form&lt;/h1&gt;
&lt;p&gt;考虑语言 &lt;span</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL04 Typed Lambda</title>
    <link href="http://example.com/2022/08/04/TAPL04-Typed-Lambda/"/>
    <id>http://example.com/2022/08/04/TAPL04-Typed-Lambda/</id>
    <published>2022-08-04T11:16:48.000Z</published>
    <updated>2022-08-07T03:14:50.964Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Simply Typed Lambda Calculus 通常记为 &lt;span
class=&quot;math inline&quot;&gt;\(\lambda_{\rightarrow}\)&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;在 ULC +</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>操作系统05 调度</title>
    <link href="http://example.com/2022/08/03/OS05-%E8%B0%83%E5%BA%A6/"/>
    <id>http://example.com/2022/08/03/OS05-%E8%B0%83%E5%BA%A6/</id>
    <published>2022-08-03T09:14:57.000Z</published>
    <updated>2022-08-03T10:00:11.563Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;事实上后面还有很多关于实时性和 case study
的高端内容，打算咕咕咕了回头再看。&lt;/p&gt;
&lt;h1</summary>
        
      
    
    
    
    
    <category term="Operating System" scheme="http://example.com/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Haskell Parser Combinator</title>
    <link href="http://example.com/2022/07/26/Haskell-Parser-Combinator/"/>
    <id>http://example.com/2022/07/26/Haskell-Parser-Combinator/</id>
    <published>2022-07-25T16:00:45.000Z</published>
    <updated>2022-07-25T17:39:26.749Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;欢迎指正本文的错误！&lt;/p&gt;
&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;What is Parser Combinator?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传统的 Parsing 包括 Lexing 和</summary>
        
      
    
    
    
    
    <category term="haskell" scheme="http://example.com/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>TAPL03 Untyped Lambda</title>
    <link href="http://example.com/2022/07/23/TAPL03-Untyped-Lambda/"/>
    <id>http://example.com/2022/07/23/TAPL03-Untyped-Lambda/</id>
    <published>2022-07-22T17:00:32.000Z</published>
    <updated>2022-07-26T02:51:02.732Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;之前写形式语义已经来过一次了，这里就跳过一点写过的&lt;/p&gt;
&lt;h1 id=&quot;untyped-lambda-calculus&quot;&gt;Untyped Lambda</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL02 Basics</title>
    <link href="http://example.com/2022/07/17/TAPL02-Basics/"/>
    <id>http://example.com/2022/07/17/TAPL02-Basics/</id>
    <published>2022-07-17T14:34:42.000Z</published>
    <updated>2022-07-22T17:00:14.062Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;notations&quot;&gt;Notations&lt;/h1&gt;
&lt;p&gt;简单的就不说了&lt;/p&gt;
&lt;h2 id=&quot;mathematics&quot;&gt;Mathematics&lt;/h2&gt;
&lt;h3 id=&quot;partial-function&quot;&gt;Partial Function&lt;/h3&gt;
&lt;p&gt;称</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL01 Intro</title>
    <link href="http://example.com/2022/07/16/TAPL01-Intro/"/>
    <id>http://example.com/2022/07/16/TAPL01-Intro/</id>
    <published>2022-07-16T14:44:40.000Z</published>
    <updated>2022-07-16T15:46:45.196Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;type-system&quot;&gt;Type System&lt;/h1&gt;
&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A type system is a tractable syntactic method for</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>操作系统04 进程与线程</title>
    <link href="http://example.com/2022/07/15/OS04-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2022/07/15/OS04-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-07-15T11:24:46.000Z</published>
    <updated>2022-08-03T10:00:11.563Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;进程&quot;&gt;进程&lt;/h1&gt;
&lt;p&gt;进程是运行中的程序实体。如果把代码视为状态机，那么进程即处于特定状态的状态机。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    
    <category term="Operating System" scheme="http://example.com/tags/Operating-System/"/>
    
  </entry>
  
</feed>
