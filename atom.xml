<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jjppp</title>
  <icon>http://example.com/icon.png</icon>
  <subtitle>Blog of jjppp</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-08T15:43:56.135Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>jpwang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Automata05 Complexity</title>
    <link href="http://example.com/2022/12/08/Automata06-Complexity/"/>
    <id>http://example.com/2022/12/08/Automata06-Complexity/</id>
    <published>2022-12-08T13:43:00.000Z</published>
    <updated>2022-12-08T15:43:56.135Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;TM 是比较基本的计算模型，后续对“计算”本身的讨论也都会基于 TM
来做。&lt;/p&gt;
&lt;p&gt;对于给定的问题，我们会粗略地考虑“计算难度”上的分类：&lt;/p&gt;
&lt;ol</summary>
        
      
    
    
    
    
    <category term="Automata" scheme="http://example.com/tags/Automata/"/>
    
  </entry>
  
  <entry>
    <title>Automata05 TM</title>
    <link href="http://example.com/2022/12/07/Automata05-TM/"/>
    <id>http://example.com/2022/12/07/Automata05-TM/</id>
    <published>2022-12-07T11:46:50.000Z</published>
    <updated>2022-12-07T15:58:45.674Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;图灵机最早是作为一种计算模型出现的，目的是讨论在这样一种机器上能解决什么样的问题。&lt;/p&gt;
&lt;p&gt;形式化的图灵机定义为七元组 &lt;span
class=&quot;math</summary>
        
      
    
    
    
    
    <category term="Automata" scheme="http://example.com/tags/Automata/"/>
    
  </entry>
  
  <entry>
    <title>Automata04 PDA</title>
    <link href="http://example.com/2022/11/09/Automata04-PDA/"/>
    <id>http://example.com/2022/11/09/Automata04-PDA/</id>
    <published>2022-11-09T08:53:04.000Z</published>
    <updated>2022-11-09T08:53:04.119Z</updated>
    
    
      
      
        
        
    <summary type="html">
</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Automata03 CFL</title>
    <link href="http://example.com/2022/11/09/Automata03-CFL/"/>
    <id>http://example.com/2022/11/09/Automata03-CFL/</id>
    <published>2022-11-09T06:56:58.000Z</published>
    <updated>2022-11-09T08:50:28.990Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;上下文无关语言（Context Free
Language）是一类比正则语言更强的语言。描述上下文无关语言的文法叫上下文无关文法（CFG）。&lt;/p&gt;
&lt;h1</summary>
        
      
    
    
    
    
    <category term="Automata" scheme="http://example.com/tags/Automata/"/>
    
  </entry>
  
  <entry>
    <title>Automata02 RE</title>
    <link href="http://example.com/2022/11/09/Automata02-RE/"/>
    <id>http://example.com/2022/11/09/Automata02-RE/</id>
    <published>2022-11-09T06:56:43.000Z</published>
    <updated>2022-11-09T06:56:43.221Z</updated>
    
    
      
      
        
        
    <summary type="html">
</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Concurrency05 Linearizability</title>
    <link href="http://example.com/2022/11/07/Concurrency05-Linearizability/"/>
    <id>http://example.com/2022/11/07/Concurrency05-Linearizability/</id>
    <published>2022-11-07T11:35:49.000Z</published>
    <updated>2022-11-07T11:35:49.117Z</updated>
    
    
      
      
        
        
    <summary type="html">
</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Concurrency04 Promising</title>
    <link href="http://example.com/2022/11/07/Concurrency04-Promising/"/>
    <id>http://example.com/2022/11/07/Concurrency04-Promising/</id>
    <published>2022-11-07T11:35:31.000Z</published>
    <updated>2022-11-07T11:52:14.657Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;C11 model 的最大问题有这么几个&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;OOTA，这说明 C11 model 太弱了&lt;/li&gt;
&lt;li&gt;UB，这让一些 type-safe 的语言没法用这个 model，因为</summary>
        
      
    
    
    
    
    <category term="Concurrency" scheme="http://example.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Linguistics02 Phonetics</title>
    <link href="http://example.com/2022/10/17/Linguistics02-Phonetics/"/>
    <id>http://example.com/2022/10/17/Linguistics02-Phonetics/</id>
    <published>2022-10-17T06:03:48.000Z</published>
    <updated>2022-10-17T12:12:07.985Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1</summary>
        
      
    
    
    
    
    <category term="Linguistics" scheme="http://example.com/tags/Linguistics/"/>
    
  </entry>
  
  <entry>
    <title>Linguistics01 Intro</title>
    <link href="http://example.com/2022/10/17/Linguistics01-Intro/"/>
    <id>http://example.com/2022/10/17/Linguistics01-Intro/</id>
    <published>2022-10-17T06:03:18.000Z</published>
    <updated>2022-10-17T06:30:22.084Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1</summary>
        
      
    
    
    
    
    <category term="Linguistics" scheme="http://example.com/tags/Linguistics/"/>
    
  </entry>
  
  <entry>
    <title>Network03 Transport</title>
    <link href="http://example.com/2022/10/16/Network03-Transport/"/>
    <id>http://example.com/2022/10/16/Network03-Transport/</id>
    <published>2022-10-16T08:39:21.000Z</published>
    <updated>2022-10-16T13:21:00.253Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;传输层向上给应用层提供进程间通信的服务，向下利用网络层提供的主机到主机的服务。&lt;/p&gt;
&lt;p&gt;可以认为传输层本质是对网络层的复用(MUX</summary>
        
      
    
    
    
    
    <category term="Network" scheme="http://example.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Automata01 FSM</title>
    <link href="http://example.com/2022/10/04/Automata01-FSM/"/>
    <id>http://example.com/2022/10/04/Automata01-FSM/</id>
    <published>2022-10-04T13:13:07.000Z</published>
    <updated>2022-10-12T09:19:28.744Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;FSM(Finite State Machine/Finite Automata) 是一种 formal
system，当然用处有很多了。&lt;/p&gt;
&lt;h1 id=&quot;basics&quot;&gt;Basics&lt;/h1&gt;
&lt;h2</summary>
        
      
    
    
    
    
    <category term="Automata" scheme="http://example.com/tags/Automata/"/>
    
  </entry>
  
  <entry>
    <title>Concurrency03 Axiomatic</title>
    <link href="http://example.com/2022/09/25/Concurrency03-Axiomatic/"/>
    <id>http://example.com/2022/09/25/Concurrency03-Axiomatic/</id>
    <published>2022-09-24T17:06:16.000Z</published>
    <updated>2022-09-24T17:06:16.584Z</updated>
    
    
      
      
        
        
    <summary type="html">
</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Concurrency02 Operational</title>
    <link href="http://example.com/2022/09/25/Concurrency02-Operational/"/>
    <id>http://example.com/2022/09/25/Concurrency02-Operational/</id>
    <published>2022-09-24T17:06:04.000Z</published>
    <updated>2022-10-02T16:05:52.562Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Memory Model 可以通过一种 Operational
的方式来定义，在这种定义下，我们可以看到一个结果是如何一步一步产生的。&lt;/p&gt;
&lt;p&gt;简单地说，一个并发的系统可以看成是 CPU +</summary>
        
      
    
    
    
    
    <category term="Concurrency" scheme="http://example.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Concurrency01 HMM</title>
    <link href="http://example.com/2022/09/25/Concurrency01-HMM/"/>
    <id>http://example.com/2022/09/25/Concurrency01-HMM/</id>
    <published>2022-09-24T17:05:33.000Z</published>
    <updated>2022-10-01T06:16:36.958Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;弱内存模型的出现，本质上是因为单线程的程序优化(编译优化/执行优化)中应用了许多的技术，这些技术在进入多线程编程时代之后使得一些符合直觉的假设不再成立，即内存模型变&quot;弱&quot;了。&lt;/p&gt;
&lt;p&gt;为了</summary>
        
      
    
    
    
    
    <category term="Concurrency" scheme="http://example.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Network02 Application</title>
    <link href="http://example.com/2022/09/12/Network02-Application/"/>
    <id>http://example.com/2022/09/12/Network02-Application/</id>
    <published>2022-09-12T12:44:14.000Z</published>
    <updated>2022-10-01T05:31:51.073Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;应用一般跑在端系统上，此时网络对应用而言是透明的，所有的网络 API
起到进程间通信的作用。&lt;/p&gt;
&lt;h1 id=&quot;application-architecture&quot;&gt;Application</summary>
        
      
    
    
    
    
    <category term="Network" scheme="http://example.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Memory Models</title>
    <link href="http://example.com/2022/09/07/Memory-Model/"/>
    <id>http://example.com/2022/09/07/Memory-Model/</id>
    <published>2022-09-07T07:23:04.000Z</published>
    <updated>2022-09-24T17:06:50.977Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;看了很多资料发现基本都是同一批人在写，&lt;a
href=&quot;https://research.swtch.com/mm&quot;&gt;这篇&lt;/a&gt;
是我感觉讲得比较清楚同时也好懂的。&lt;/p&gt;
&lt;p&gt;同时我发现很少有人用形式化的方法描述</summary>
        
      
    
    
    
    
    <category term="Concurrency" scheme="http://example.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>TAOMP02 Mutex</title>
    <link href="http://example.com/2022/09/02/TAOMP02-Mutex/"/>
    <id>http://example.com/2022/09/02/TAOMP02-Mutex/</id>
    <published>2022-09-02T09:03:21.000Z</published>
    <updated>2022-09-05T00:04:35.487Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;形式化&quot;&gt;形式化&lt;/h1&gt;
&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事件&lt;/strong&gt;是瞬间的、原子的，通常用 &lt;span
class=&quot;math inline&quot;&gt;\(read,</summary>
        
      
    
    
    
    
    <category term="TAOMP" scheme="http://example.com/tags/TAOMP/"/>
    
  </entry>
  
  <entry>
    <title>TAOMP01 Intro</title>
    <link href="http://example.com/2022/09/01/TAOMP01-Intro/"/>
    <id>http://example.com/2022/09/01/TAOMP01-Intro/</id>
    <published>2022-09-01T08:33:49.000Z</published>
    <updated>2022-09-01T16:55:25.618Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;八月份已经过去了，放假前立下的 flag 还有好多没有实现...&lt;/p&gt;
&lt;p&gt;但是这本是上学期上 OS
就想看的书，更早是在吃土耳其烤肉的时候就被安利过&lt;/p&gt;
&lt;p&gt;开干吧...&lt;/p&gt;
&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;h2</summary>
        
      
    
    
    
    
    <category term="TAOMP" scheme="http://example.com/tags/TAOMP/"/>
    
  </entry>
  
  <entry>
    <title>TAPL09 Recursive Types</title>
    <link href="http://example.com/2022/08/29/TAPL09-Recursive-Types/"/>
    <id>http://example.com/2022/08/29/TAPL09-Recursive-Types/</id>
    <published>2022-08-29T15:16:41.000Z</published>
    <updated>2022-08-31T06:54:12.692Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;有种前菜只是刚刚上完的感觉。&lt;/p&gt;
&lt;p&gt;递归数据结构是非常常见的结构，给递归数据结构赋予的类型通常会是一个递归的类型。&lt;/p&gt;
&lt;p&gt;经典的例如&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL08 Subtyping</title>
    <link href="http://example.com/2022/08/28/TAPL08-Subtyping/"/>
    <id>http://example.com/2022/08/28/TAPL08-Subtyping/</id>
    <published>2022-08-28T09:44:48.000Z</published>
    <updated>2022-08-28T14:58:02.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Subtyping（或者说 Subtype
Polymorphism）给出了一种类型间的转换关系（一种
preorder），使得程序猿可以写出很通用的代码。典型的子类型出现在各种 OO
语言里，例如 Java</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
</feed>
