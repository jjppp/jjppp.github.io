<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jjppp</title>
  <icon>http://example.com/icon.png</icon>
  <subtitle>Blog of jjppp</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-28T14:58:02.558Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>jpwang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TAPL08 Subtyping</title>
    <link href="http://example.com/2022/08/28/TAPL08-Subtyping/"/>
    <id>http://example.com/2022/08/28/TAPL08-Subtyping/</id>
    <published>2022-08-28T09:44:48.000Z</published>
    <updated>2022-08-28T14:58:02.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Subtyping（或者说 Subtype Polymorphism）给出了一种类型间的转换关系（一种 preorder），使得程序猿可以写出很通用的代码。典型的子类型出现在各种 OO 语言里，例如 Java</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL07 Exceptions</title>
    <link href="http://example.com/2022/08/28/TAPL07-Exceptions/"/>
    <id>http://example.com/2022/08/28/TAPL07-Exceptions/</id>
    <published>2022-08-28T06:50:10.000Z</published>
    <updated>2022-08-28T07:51:26.975Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;异常处理一直是老大难问题，大概有这么几个流派&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;用返回值区分，Rust 的 &lt;code&gt;Result&lt;/code&gt;、Haskell 的 &lt;code&gt;Either a</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL06 References</title>
    <link href="http://example.com/2022/08/27/TAPL06-References/"/>
    <id>http://example.com/2022/08/27/TAPL06-References/</id>
    <published>2022-08-27T04:04:59.000Z</published>
    <updated>2022-08-27T06:00:27.754Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;之前提到的 &lt;code&gt;x=term&lt;/code&gt; 都是 name binding。因为所有的项都可以求值，并且都是纯的计算模型（只和 substitution 有关），所以本质上是 meta level</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>Network01 Intro</title>
    <link href="http://example.com/2022/08/14/Network01-Intro/"/>
    <id>http://example.com/2022/08/14/Network01-Intro/</id>
    <published>2022-08-14T07:41:57.000Z</published>
    <updated>2022-08-14T07:42:34.617Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;网络&quot;&gt;网络&lt;/h1&gt;
&lt;p&gt;形式化的定义网络为图&lt;/p&gt;
&lt;h1 id=&quot;计算机网络&quot;&gt;计算机网络&lt;/h1&gt;
&lt;h2 id=&quot;层级&quot;&gt;层级&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;应用层（http ftp smtp）&lt;/li&gt;
&lt;li&gt;网络层（tcp</summary>
        
      
    
    
    
    
    <category term="Network" scheme="http://example.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>TAPL05 Extensions</title>
    <link href="http://example.com/2022/08/09/TAPL05-Extensions/"/>
    <id>http://example.com/2022/08/09/TAPL05-Extensions/</id>
    <published>2022-08-09T03:56:13.000Z</published>
    <updated>2022-08-11T09:53:56.323Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;这一章主要是给 STLC 加上各种常用的 construct，也就是在做语法糖化的过程。比较轻松&lt;/p&gt;
&lt;h1 id=&quot;derived-form&quot;&gt;Derived Form&lt;/h1&gt;
&lt;p&gt;考虑语言 &lt;span</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL04 Typed Lambda</title>
    <link href="http://example.com/2022/08/04/TAPL04-Typed-Lambda/"/>
    <id>http://example.com/2022/08/04/TAPL04-Typed-Lambda/</id>
    <published>2022-08-04T11:16:48.000Z</published>
    <updated>2022-08-07T03:14:50.964Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Simply Typed Lambda Calculus 通常记为 &lt;span class=&quot;math inline&quot;&gt;\(\lambda_{\rightarrow}\)&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;在 ULC +</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>操作系统05 调度</title>
    <link href="http://example.com/2022/08/03/OS05-%E8%B0%83%E5%BA%A6/"/>
    <id>http://example.com/2022/08/03/OS05-%E8%B0%83%E5%BA%A6/</id>
    <published>2022-08-03T09:14:57.000Z</published>
    <updated>2022-08-03T10:00:11.563Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;事实上后面还有很多关于实时性和 case study 的高端内容，打算咕咕咕了回头再看。&lt;/p&gt;
&lt;h1</summary>
        
      
    
    
    
    
    <category term="Operating System" scheme="http://example.com/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Haskell Parser Combinator</title>
    <link href="http://example.com/2022/07/26/Haskell-Parser-Combinator/"/>
    <id>http://example.com/2022/07/26/Haskell-Parser-Combinator/</id>
    <published>2022-07-25T16:00:45.000Z</published>
    <updated>2022-07-25T17:39:26.749Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;欢迎指正本文的错误！&lt;/p&gt;
&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;What is Parser Combinator?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传统的 Parsing 包括 Lexing 和 Parsing</summary>
        
      
    
    
    
    
    <category term="haskell" scheme="http://example.com/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>TAPL03 Untyped Lambda</title>
    <link href="http://example.com/2022/07/23/TAPL03-Untyped-Lambda/"/>
    <id>http://example.com/2022/07/23/TAPL03-Untyped-Lambda/</id>
    <published>2022-07-22T17:00:32.000Z</published>
    <updated>2022-07-26T02:51:02.732Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;之前写形式语义已经来过一次了，这里就跳过一点写过的&lt;/p&gt;
&lt;h1 id=&quot;untyped-lambda-calculus&quot;&gt;Untyped Lambda</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL02 Basics</title>
    <link href="http://example.com/2022/07/17/TAPL02-Basics/"/>
    <id>http://example.com/2022/07/17/TAPL02-Basics/</id>
    <published>2022-07-17T14:34:42.000Z</published>
    <updated>2022-07-22T17:00:14.062Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;notations&quot;&gt;Notations&lt;/h1&gt;
&lt;p&gt;简单的就不说了&lt;/p&gt;
&lt;h2 id=&quot;mathematics&quot;&gt;Mathematics&lt;/h2&gt;
&lt;h3 id=&quot;partial-function&quot;&gt;Partial Function&lt;/h3&gt;
&lt;p&gt;称</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>TAPL01 Intro</title>
    <link href="http://example.com/2022/07/16/TAPL01-Intro/"/>
    <id>http://example.com/2022/07/16/TAPL01-Intro/</id>
    <published>2022-07-16T14:44:40.000Z</published>
    <updated>2022-07-16T15:46:45.196Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;type-system&quot;&gt;Type System&lt;/h1&gt;
&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A type system is a tractable syntactic method for</summary>
        
      
    
    
    
    
    <category term="TAPL" scheme="http://example.com/tags/TAPL/"/>
    
  </entry>
  
  <entry>
    <title>操作系统04 进程与线程</title>
    <link href="http://example.com/2022/07/15/OS04-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2022/07/15/OS04-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-07-15T11:24:46.000Z</published>
    <updated>2022-08-03T10:00:11.563Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;进程&quot;&gt;进程&lt;/h1&gt;
&lt;p&gt;进程是运行中的程序实体。如果把代码视为状态机，那么进程即处于特定状态的状态机。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    
    <category term="Operating System" scheme="http://example.com/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>Algebra03 同态与同构</title>
    <link href="http://example.com/2022/07/09/Algebra03-%E5%90%8C%E6%80%81%E4%B8%8E%E5%90%8C%E6%9E%84/"/>
    <id>http://example.com/2022/07/09/Algebra03-%E5%90%8C%E6%80%81%E4%B8%8E%E5%90%8C%E6%9E%84/</id>
    <published>2022-07-08T16:26:16.000Z</published>
    <updated>2022-08-14T07:52:09.966Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;群的同构意味着二者本质上没有区别, 同态则可以导出某些同构.&lt;/p&gt;
&lt;p&gt;下面默认 &lt;span class=&quot;math inline&quot;&gt;\(G_1, G_2\)&lt;/span&gt; 是两个群.&lt;/p&gt;
&lt;h1 id=&quot;同态&quot;&gt;同态&lt;/h1&gt;
&lt;p&gt;若存在映射 &lt;span</summary>
        
      
    
    
    
    
    <category term="Algebra" scheme="http://example.com/tags/Algebra/"/>
    
  </entry>
  
  <entry>
    <title>Algebra02 子群和商群</title>
    <link href="http://example.com/2022/07/06/Algebra02-%E5%AD%90%E7%BE%A4%E5%92%8C%E5%95%86%E7%BE%A4/"/>
    <id>http://example.com/2022/07/06/Algebra02-%E5%AD%90%E7%BE%A4%E5%92%8C%E5%95%86%E7%BE%A4/</id>
    <published>2022-07-06T10:06:58.000Z</published>
    <updated>2022-08-14T07:52:04.805Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;主要关注怎么由已有群得到新的群. 如果上过正经高代应该会对这一套流程比较熟悉&lt;/p&gt;
&lt;h1 id=&quot;子群&quot;&gt;子群&lt;/h1&gt;
&lt;p&gt;$ G$ 为子群, 非空子集 &lt;span class=&quot;math inline&quot;&gt;\(H\subseteq G\)&lt;/span&gt; 是</summary>
        
      
    
    
    
    
    <category term="Algebra" scheme="http://example.com/tags/Algebra/"/>
    
  </entry>
  
  <entry>
    <title>Algebra01 群的定义</title>
    <link href="http://example.com/2022/07/06/Algebra01-%E7%BE%A4%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    <id>http://example.com/2022/07/06/Algebra01-%E7%BE%A4%E7%9A%84%E5%AE%9A%E4%B9%89/</id>
    <published>2022-07-06T04:27:46.000Z</published>
    <updated>2022-08-14T07:51:58.697Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;觉得要好好学一学这个东西了&lt;/p&gt;
&lt;h1 id=&quot;代数系统&quot;&gt;代数系统&lt;/h1&gt;
&lt;h2 id=&quot;定义&quot;&gt;定义&lt;/h2&gt;
&lt;p&gt;称 &lt;span class=&quot;math inline&quot;&gt;\(\left&amp;lt;G,\circ\right&amp;gt;\)&lt;/span&gt;</summary>
        
      
    
    
    
    
    <category term="Algebra" scheme="http://example.com/tags/Algebra/"/>
    
  </entry>
  
  <entry>
    <title>操作系统03 内存管理</title>
    <link href="http://example.com/2022/07/04/OS03-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/07/04/OS03-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2022-07-03T17:46:50.000Z</published>
    <updated>2022-08-03T10:00:11.563Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;虚拟地址&quot;&gt;虚拟地址&lt;/h1&gt;
&lt;p&gt;通过地址翻译, 可以利用统一的虚拟地址空间来为用户程序提供内存, 同时还能隔离不同进程增强安全性&lt;/p&gt;
&lt;p&gt;基于分页的地址翻译涉及到页表和radix-tree这种数据结构, 以及 TLB 这样的部件,</summary>
        
      
    
    
    
    
    <category term="Operating System" scheme="http://example.com/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>操作系统02 并发</title>
    <link href="http://example.com/2022/07/03/OS02-%E5%B9%B6%E5%8F%91/"/>
    <id>http://example.com/2022/07/03/OS02-%E5%B9%B6%E5%8F%91/</id>
    <published>2022-07-03T08:01:52.000Z</published>
    <updated>2022-08-03T10:00:11.563Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;并发&quot;&gt;并发&lt;/h1&gt;
&lt;p&gt;如果两件事情在逻辑上同时发生了, 那么我们就说它们并发了.&lt;/p&gt;
&lt;p&gt;在Linux上很容易用POSIX API创建新的执行流(线程), 可以利用 strace top man 等工具观察具体创建的原理</summary>
        
      
    
    
    
    
    <category term="Operating System" scheme="http://example.com/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>操作系统01 导引</title>
    <link href="http://example.com/2022/07/03/OS01-%E5%AF%BC%E5%BC%95/"/>
    <id>http://example.com/2022/07/03/OS01-%E5%AF%BC%E5%BC%95/</id>
    <published>2022-07-03T07:10:51.000Z</published>
    <updated>2022-08-03T10:00:11.563Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;写在前面&lt;/h1&gt;
&lt;p&gt;本科期间最期待的一门课, 就这么结束了有些可惜, 决心回头看看slides, 结合交大的教材再看看有没有什么可以新发掘一下的点.&lt;/p&gt;
&lt;p&gt;现在看来是因为拔尖班的实操课程实在太少,</summary>
        
      
    
    
    
    
    <category term="Operating System" scheme="http://example.com/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>ANTLR4 笔记</title>
    <link href="http://example.com/2022/07/02/ANTLR4-%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/07/02/ANTLR4-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-02T05:07:19.000Z</published>
    <updated>2022-07-02T05:37:59.183Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;写在前面&lt;/h1&gt;
&lt;p&gt;最近需要用到这个工具，官方推荐的Definitive ANTLR Book写得比较杂乱，于是想记一下比较有用的一些点&lt;/p&gt;
&lt;h1 id=&quot;meta-language&quot;&gt;meta language&lt;/h1&gt;
&lt;h2</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>操作系统 Lab3 uproc</title>
    <link href="http://example.com/2022/06/23/OSLab3-uproc/"/>
    <id>http://example.com/2022/06/23/OSLab3-uproc/</id>
    <published>2022-06-23T11:19:50.000Z</published>
    <updated>2022-08-03T10:04:31.001Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;lab3-uproc&quot;&gt;Lab3-uproc&lt;/h1&gt;
&lt;h2 id=&quot;设计&quot;&gt;设计&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 L3 的时候实现了侵入式链表，这样就可以把原先 pmm 的 &lt;code&gt;free_list&lt;/code&gt;、kmt 的</summary>
        
      
    
    
    
    
    <category term="Operating System" scheme="http://example.com/tags/Operating-System/"/>
    
  </entry>
  
</feed>
